# Copyright 2020 <盏一 w@hidva.com>
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# http://www.apache.org/licenses/LICENSE-2.0
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# We define the hook in guc mod.
# preassign(newval, oldstate), the oldstate is used to store current guc values.
# preassign should print some warn logs if it return false.
#
# Currently, boot_val of GUC except STR supports expression,
# for example, you can specify the boot_val of max_connection to `1 + 1`.
# We need a marker to determine whether the boot_val of a string is an expression or a string literal,
# maybe we can use `@@` as the marker.
#
# On the other hand, we can rewrite gucdef.yaml in rust and put it as part of build.rs, maybe it is the right way.
#
#- vartype: INT
#  name: max_connections
#  context: SigHup
#  short_desc: Sets the maximum number of concurrent connections.
#  long_desc: xxxx
#  boot_val: 16
#  preassign: TheNameOfPreAssignHook
#  show: TheNameOfShowHook
#  flags: xxx | yyy
- vartype: INT
  name: max_connections
  context: SigHup
  short_desc: Sets the maximum number of concurrent connections.
  boot_val: 16
- vartype: INT
  name: port
  context: KuiBaDB
  short_desc: Sets the TCP port the server listens on.
  boot_val: 1218
- vartype: STR
  name: log_min_messages
  context: SigHup
  short_desc: Sets the message levels that are logged.
  long_desc: The valid values are OFF, ERROR, WARNING, INFO, DEBUG1, DEBUG2.
  boot_val: DEBUG2
  preassign: log_min_messages_preassign
- vartype: STR
  name: server_version
  context: Internal
  short_desc: "Shows the server version."
  boot_val: "0.0.1"
  flags: REPORT
- vartype: STR
  name: server_encoding
  context: Internal
  short_desc: Sets the server (database) character set encoding.
  boot_val: UTF8
  flags: REPORT
- vartype: STR
  name: client_encoding
  context: Internal
  short_desc: Sets the client's character set encoding.
  boot_val: UTF8
  flags: REPORT
- vartype: BOOL
  name: is_superuser
  context: Internal
  short_desc: Shows whether the current user is a superuser.
  boot_val: true
  flags: REPORT
- vartype: REAL
  name: seq_page_cost
  context: UserSet
  short_desc: Sets the planner's estimate of the cost of a sequentially fetched disk page.
  boot_val: 1.0
- vartype: STR
  name: search_path
  context: UserSet
  short_desc: Sets the schema search order for names that are not schema-qualified.
  boot_val: "public,kb_catalog"
  preassign: search_path_preassign
- vartype: INT
  name: clog_l1cache_size
  context: SigHup
  short_desc: Size of the clog l1cache
  boot_val: 1024
- vartype: INT
  name: clog_l2cache_size
  context: KuiBaDB
  short_desc: Size of the clog l2cache
  boot_val: 128
- vartype: INT
  name: wal_buff_max_size
  context: KuiBaDB
  short_desc: "The max size of one wal buffer, unit: bytes"
  boot_val: 33554432
- vartype: INT
  name: wal_file_max_size
  context: KuiBaDB
  short_desc: "The max size of one wal file, unit: bytes"
  boot_val: 1073741824
- vartype: INT
  name: xid_stop_limit
  context: KuiBaDB
  short_desc: "Sets the number of XIDs before XID wraparound at which we will no longer allow the system to be started"
  boot_val: 2000000000
- vartype: INT
  name: mvcc_blk_rows
  context: SigHup
  short_desc: "The default number of rows of one mvcc block."
  boot_val: 65536
- vartype: INT
  name: data_blk_rows
  context: SigHup
  short_desc: "The default number of rows of one data block."
  boot_val: 65536
- vartype: INT
  name: mvcc_buf_cap
  context: KuiBaDB
  short_desc: "The default capacity of MvccBuf"
  boot_val: 16
- vartype: INT
  name: max_files_per_process
  context: SigHup
  short_desc: "Sets the maximum number of simultaneously open files for each server process."
  boot_val: 1000
- vartype: BOOL
  name: enable_cs_wal
  context: KuiBaDB
  short_desc: "The default enable_cs_wal"
  boot_val: false
- vartype: INT
  name: table_sv_cap
  context: KuiBaDB
  short_desc: "The capacity for TabSupVer"
  boot_val: 1024
- vartype: INT
  name: table_mvcc_cap
  context: KuiBaDB
  short_desc: "The capacity for TabSupVer"
  boot_val: 1024
- vartype: INT
  name: batch_size
  context: UserSet
  short_desc: "batch_size"
  boot_val: 1024
- vartype: INT
  name: tokio_max_blocking_threads
  context: KuiBaDB
  short_desc: "max_blocking_threads for tokio Runtime"
  boot_val: 512
- vartype: INT
  name: tokio_thread_keep_alive
  context: KuiBaDB
  short_desc: "thread_keep_alive for tokio Runtime. unit: Second"
  boot_val: 16
- vartype: INT
  name: tokio_thread_stack_size
  context: KuiBaDB
  short_desc: "thread_stack_size for tokio Runtime. unit: byte"
  boot_val: 2 * 1024 * 1024
- vartype: INT
  name: tokio_worker_threads
  context: KuiBaDB
  short_desc: "worker_threads for tokio Runtime. 0 means the number of cores available to the system."
  boot_val: 0
- vartype: INT
  name: iopoll_uring_num
  context: KuiBaDB
  short_desc: "iopoll_uring_num. 0 disable iopoll uring"
  boot_val: 1
- vartype: INT
  name: non_iopoll_uring_num
  context: KuiBaDB
  short_desc: "iopoll_uring_num"
  boot_val: 1
- vartype: INT
  name: iopoll_uring_depth
  context: KuiBaDB
  short_desc: "iopoll_uring_num"
  boot_val: 256
- vartype: INT
  name: non_iopoll_uring_depth
  context: KuiBaDB
  short_desc: "iopoll_uring_num"
  boot_val: 2048
- vartype: INT
  name: iopoll_uring_sq_thread_idle
  context: KuiBaDB
  short_desc: "iopoll_uring_sq_thread_idle. Unit: Second"
  boot_val: 1
- vartype: INT
  name: non_iopoll_uring_sq_thread_idle
  context: KuiBaDB
  short_desc: "non_iopoll_uring_sq_thread_idle. Unit: Second"
  boot_val: 1

