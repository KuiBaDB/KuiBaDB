// Copyright 2020 <盏一 w@hidva.com>
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.



use super::syn;
use std::str::FromStr;

grammar;

pub Stmt: syn::Stmt<'input> = {
    <s:stmt> => s,
    <s:stmt> ";" => s,
}

// For every symbol X in sql.lalrpop, if there is a definition of Y with the same name in postgres/gram.y,
// then X must be a subset of Y.

stmt: syn::Stmt<'input> = {
    <s:VariableSetStmt> => syn::Stmt::VariableSet(s),
    <s:VariableShowStmt> => syn::Stmt::VariableShow(s),
    <s:DefineTypeStmt> => syn::Stmt::DefineType(s),
    <s:SelectStmt> => syn::Stmt::Select(s),
    <s:TranStmt> => syn::Stmt::Tran(s),
    // EMPTY
    => syn::Stmt::Empty,
}

TranStmt: syn::TranStmt = {
    BEGIN_P => syn::TranStmt::Begin,
    ABORT_P => syn::TranStmt::Abort,
    COMMIT => syn::TranStmt::Commit,
}

VariableShowStmt: syn::VariableShowStmt<'input> = {
    SHOW <n:var_name> => syn::VariableShowStmt {
        name: n,
    }
}

VariableSetStmt: syn::VariableSetStmt<'input> = {
    SET <n:set_rest> => n,
}

set_rest: syn::VariableSetStmt<'input> = {
    <s:set_rest_more> => s,
}

set_rest_more: syn::VariableSetStmt<'input> = {
    <s:generic_set> => s,
}

generic_set: syn::VariableSetStmt<'input> = {
    <n:var_name> TO <v:var_value> => syn::VariableSetStmt {
        name: n,
        val: v,
    },
    <n:var_name> "=" <v:var_value> => syn::VariableSetStmt {
        name: n,
        val: v,
    }
}

var_value: syn::AConst<'input> = {
    <s:@L> <v:opt_boolean_or_string> <e:@R> => syn::AConst {
        val: syn::Value::Str(v),
        loc: syn::Location {s, e}
    },

    <s:@L> <v:NumericOnly> <e:@R> => syn::AConst {
        val: syn::Value::Num(v),
        loc: syn::Location {s, e},
    },
}

NumericOnly: syn::NumVal<'input> = {
    <v:I_or_F_const> => v,
    "+" <v:I_or_F_const> => v,
    "-" <v:I_or_F_const> => v.neg(),
}

I_or_F_const: syn::NumVal<'input> = {
    <s:DECIMAL> => syn::NumVal::Float{neg: false, v: s},
    <s:INTEGER> => {
        if let Ok(v) = i32::from_str(s) {
            syn::NumVal::Int(v)
        } else {
            syn::NumVal::Float{neg: false, v: s}
        }
    }
}

opt_boolean_or_string: syn::StrVal<'input> = {
    TRUE_P => syn::StrVal::InPlace("true"),
    FALSE_P => syn::StrVal::InPlace("false"),
    <s:Sconst> => s,
}

Sconst: syn::StrVal<'input> = {
    <s:SCONST> => s,
}

SCONST: syn::StrVal<'input> = {
    // It seems that if we want to support escape, we have to implement our lexer.
    <s:XB> => syn::StrVal::InPlace(&s[1..s.len()-1]),
}

var_name: syn::StrVal<'input> = {
    <s:ColId> => s,
    <n:var_name> "." <v:ColId> => syn::StrVal::Dyn(format!("{}.{}", &*n, &*v)),
}

ColId: syn::StrVal<'input> = {
    <s:IDENT> => s,
}

match {
    // keywords
    r"[sS][eE][lL][eE][cC][tT]" => SELECT,
    r"[aA][sS]" => AS,
    r"[cC][rR][eE][aA][tT][eE]" => CREATE,
    r"[tT][yY][pP][eE]" => TYPE_P,
    r"[tT][oO]" => TO,
    r"[sS][eE][tT]" => SET,
    r"[sS][hH][oO][wW]" => SHOW,
    r"[tT][rR][uU][eE]" => TRUE_P,
    r"[bB][eE][gG][iI][nN]" => BEGIN_P,
    r"[aA][bB][oO][rR][tT]" => ABORT_P,
    r"[cC][oO][mM][mM][iI][tT]" => COMMIT,
    r"[fF][aA][lL][sS][eE]" => FALSE_P,
} else {
    r"[a-z_][a-z0-9_]*" => LOWERCASE_ID,
} else {
    r"[a-zA-Z_][0-9a-zA-Z_]*" => ID,
    r"[0-9]*\.[0-9]+|[0-9]+\.[0-9]*" => DECIMAL,
    r"[0-9]+" => INTEGER,
} else {
    r"'[^']*'" => XB,
    _,
}

any_name: Vec<syn::StrVal<'input>> = {
    <s:ColId> => vec![s],
    <s:ColId> <mut a:attrs> => {
        a.insert(0, s);
        a
    }
}

attrs: Vec<syn::StrVal<'input>> = {
    "." <s:attr_name> => vec![s],

    <mut s:attrs> "." <a:attr_name> => {
        s.push(a);
        s
    }
}

attr_name: syn::StrVal<'input> = {
    <s:ColLabel> => s,
}

ColLabel: syn::StrVal<'input> = {
    <s:IDENT> => s,
}

IDENT: syn::StrVal<'input> = {

    <v:LOWERCASE_ID> => syn::StrVal::InPlace(v),

    <v:ID> => syn::StrVal::Dyn(v.to_ascii_lowercase()),

    "\"" <v:ID> "\"" => syn::StrVal::InPlace(v),

}

DefineTypeStmt: syn::DefineTypeStmt<'input> = {
    CREATE TYPE_P <n:any_name> => syn::DefineTypeStmt {
        defnames: n,
        definition: None,
    },

}

// We use the typical pattern introduced in lalrpop to encode precedence.

// replace with: a_expr: Box<syn::Expr<'input>> ??
// RustPython/python.lalrpop use Expression instead of Box<Expression>.
a_expr: syn::Expr<'input> = {
    <s:@L> <l:a_expr> <o:a_expr_lvl0_op> <r:a_expr_lvl1> <e:@R> => syn::Expr::AExpr(syn::AExpr{
        kind: syn::AExprKind::Op,
        name: vec![syn::StrVal::InPlace(o)],
        oprands: Box::new(syn::AExprOprands::Two(l, r)),
        loc: syn::Location{s, e},
    }),
    <s:a_expr_lvl1> => s,
}

a_expr_lvl0_op: &'input str = {
    <s:"+"> => s,
    <s:"-"> => s,
};

a_expr_lvl1: syn::Expr<'input> = {
    <s:@L> <l:a_expr_lvl1> <o:a_expr_lvl1_op> <r:a_expr_lvl2> <e:@R> => syn::Expr::AExpr(syn::AExpr{
        kind: syn::AExprKind::Op,
        name: vec![syn::StrVal::InPlace(o)],
        oprands: Box::new(syn::AExprOprands::Two(l, r)),
        loc: syn::Location{s, e},
    }),
    <s:a_expr_lvl2> => s,
}

a_expr_lvl1_op: &'input str = {
    <s:"*"> => s,
    <s:"/"> => s,
    <s:"%"> => s,
};

a_expr_lvl2: syn::Expr<'input> = {
    <s:@L> <o:a_expr_lvl2_unary_op> <r:a_expr_lvl2> <e:@R> => syn::Expr::AExpr(syn::AExpr{
        kind: syn::AExprKind::Op,
        name: vec![syn::StrVal::InPlace(o)],
        oprands: Box::new(syn::AExprOprands::One(r)),
        loc: syn::Location{s, e},
    }),
    <s:c_expr> => s,
}

a_expr_lvl2_unary_op: &'input str = {
    <s:"+"> => s,
    <s:"-"> => s,
};

// c_expr is the atomic expression used in the typical pattern for encoding precedence.
c_expr: syn::Expr<'input> = {
    <x:AexprConst> => x,
    "(" <x:a_expr> ")" => x,
}

AexprConst: syn::Expr<'input> = {
    <s:@L> <x:I_or_F_const> <e:@R> => syn::Expr::AConst(syn::AConst {
        val: syn::Value::Num(x),
        loc: syn::Location {s, e}
    }),
    <s:@L> <x:Sconst> <e:@R> => syn::Expr::AConst(syn::AConst {
        val: syn::Value::Str(x),
        loc: syn::Location {s, e}
    }),
}

target_el: syn::ResTarget<'input> = {
    <s:@L> <x:a_expr> AS <c:ColLabel> <e: @R> => syn::ResTarget {
        name: Some(c),
        val: x,
        loc: syn::Location{s, e},
    },
    <s:@L> <x:a_expr> <e: @R> => syn::ResTarget {
        name: None,
        val: x,
        loc: syn::Location{s, e},
    },
}

target_list: Vec<syn::ResTarget<'input>> = {
    <t:target_el> => vec![t],
    <mut l:target_list> "," <t:target_el> => {
        l.push(t);
        l
    }
}

opt_target_list: Vec<syn::ResTarget<'input>> = {
    <l:target_list> => l,
    // EMPTY
    => Vec::new(),
}

simple_select: syn::SelectStmt<'input> = {
    SELECT <l:opt_target_list> => syn::SelectStmt {
        tlist: l,
    }
}

select_no_parens: syn::SelectStmt<'input> = {
    <s:simple_select> => s,
}

SelectStmt: syn::SelectStmt<'input> = {
    <s:select_no_parens> => s,
}