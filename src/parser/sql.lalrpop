// Copyright 2020 <盏一 w@hidva.com>
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.



use super::syn;
use std::str::FromStr;
use crate::access::lmgr::LockMode;

grammar;

pub Stmt: syn::Stmt<'input> = {
    <s:stmt> => s,
    <s:stmt> ";" => s,
}

// For every symbol X in sql.lalrpop, if there is a definition of Y with the same name in postgres/gram.y,
// then X must be a subset of Y.

stmt: syn::Stmt<'input> = {
    <s:VariableSetStmt> => syn::Stmt::VariableSet(s),
    <s:VariableShowStmt> => syn::Stmt::VariableShow(s),
    <s:DefineTypeStmt> => syn::Stmt::DefineType(s),
    <s:SelectStmt> => syn::Stmt::Select(s),
    <s:TranStmt> => syn::Stmt::Tran(s),
    <s:CreateTableStmt> => syn::Stmt::CreateTable(s),
    <s:LockStmt> => syn::Stmt::Lock(s),
    <s:CopyStmt> => syn::Stmt::Copy(s),
    // EMPTY
    => syn::Stmt::Empty,
}

TranStmt: syn::TranStmt = {
    BEGIN_P => syn::TranStmt::Begin,
    ABORT_P => syn::TranStmt::Abort,
    COMMIT => syn::TranStmt::Commit,
}

VariableShowStmt: syn::VariableShowStmt<'input> = {
    SHOW <n:var_name> => syn::VariableShowStmt {
        name: n,
    },
}

VariableSetStmt: syn::VariableSetStmt<'input> = {
    SET <n:set_rest> => n,
}

set_rest: syn::VariableSetStmt<'input> = {
    <s:set_rest_more> => s,
}

set_rest_more: syn::VariableSetStmt<'input> = {
    <s:generic_set> => s,
}

generic_set: syn::VariableSetStmt<'input> = {
    <n:var_name> TO <v:var_value> => syn::VariableSetStmt {
        name: n,
        val: v,
    },
    <n:var_name> "=" <v:var_value> => syn::VariableSetStmt {
        name: n,
        val: v,
    },
}

var_value: syn::AConst<'input> = {
    <s:@L> <v:opt_boolean_or_string> <e:@R> => syn::AConst {
        val: syn::Value::Str(v),
        loc: syn::Location {s, e}
    },

    <s:@L> <v:NumericOnly> <e:@R> => syn::AConst {
        val: syn::Value::Num(v),
        loc: syn::Location {s, e},
    },
}

NumericOnly: syn::NumVal<'input> = {
    <v:I_or_F_const> => v,
    "+" <v:I_or_F_const> => v,
    "-" <v:I_or_F_const> => v.neg(),
}

I_or_F_const: syn::NumVal<'input> = {
    <s:DECIMAL> => syn::NumVal::Float{neg: false, v: s},
    <s:INTEGER> => {
        if let Ok(v) = i32::from_str(s) {
            syn::NumVal::Int(v)
        } else {
            syn::NumVal::Float{neg: false, v: s}
        }
    },
}

opt_boolean_or_string: syn::StrVal<'input> = {
    TRUE_P => syn::StrVal::InPlace("true"),
    FALSE_P => syn::StrVal::InPlace("false"),
    <s:Sconst> => s,
}

Sconst: syn::StrVal<'input> = {
    <s:SCONST> => s,
}

copy_file_name: syn::StrVal<'input> = {
    <s:Sconst> => s,
}

SCONST: syn::StrVal<'input> = {
    // It seems that if we want to support escape, we have to implement our lexer.
    <s:XB> => syn::StrVal::InPlace(&s[1..s.len()-1]),
}

var_name: syn::StrVal<'input> = {
    <s:ColId> => s,
    <n:var_name> "." <v:ColId> => syn::StrVal::Dyn(format!("{}.{}", &*n, &*v)),
}

ColId: syn::StrVal<'input> = {
    <s:IDENT> => s,
}

match {
    // keywords
    r"(?i)csv" => CSV,
    r"(?i)null" => NULL_P,
    r"(?i)delimiters" => DELIMITERS,
    r"(?i)using" => USING,
    r"(?i)copy" => COPY,
    r"(?i)with" => WITH,
    r"(?i)mode" => MODE,
    r"(?i)select" => SELECT,
    r"(?i)as" => AS,
    r"(?i)create" => CREATE,
    r"(?i)type" => TYPE_P,
    r"(?i)to" => TO,
    r"(?i)from" => FROM,
    r"(?i)in" => IN_P,
    r"(?i)set" => SET,
    r"(?i)show" => SHOW,
    r"(?i)true" => TRUE_P,
    r"(?i)begin" => BEGIN_P,
    r"(?i)abort" => ABORT_P,
    r"(?i)commit" => COMMIT,
    r"(?i)false" => FALSE_P,
    r"(?i)int" => INT_P,
    r"(?i)smallint" => SMALLINT,
    r"(?i)table" => TABLE,
    r"(?i)varchar" => VARCHAR,
    r"(?i)lock" => LOCK_P,
    r"(?i)access" => ACCESS,
    r"(?i)row" => ROW,
    r"(?i)share" => SHARE,
    r"(?i)exclusive" => EXCLUSIVE,
    r"(?i)update" => UPDATE,
} else {
    r"[a-z_][a-z0-9_]*" => LOWERCASE_ID,
} else {
    r"[a-zA-Z_][0-9a-zA-Z_]*" => ID,
    r"[0-9]*\.[0-9]+|[0-9]+\.[0-9]*" => DECIMAL,
    r"[0-9]+" => INTEGER,
} else {
    r"'[^']*'" => XB,
    _,
}

any_name: Vec<syn::StrVal<'input>> = {
    <s:ColId> => vec![s],
    <s:ColId> <mut a:attrs> => {
        a.insert(0, s);
        a
    },
}

attrs: Vec<syn::StrVal<'input>> = {
    "." <s:attr_name> => vec![s],

    <mut s:attrs> "." <a:attr_name> => {
        s.push(a);
        s
    },
}

attr_name: syn::StrVal<'input> = {
    <s:ColLabel> => s,
}

ColLabel: syn::StrVal<'input> = {
    <s:IDENT> => s,
}

IDENT: syn::StrVal<'input> = {

    <v:LOWERCASE_ID> => syn::StrVal::InPlace(v),

    <v:ID> => syn::StrVal::Dyn(v.to_ascii_lowercase()),

    "\"" <v:ID> "\"" => syn::StrVal::InPlace(v),

}

DefineTypeStmt: syn::DefineTypeStmt<'input> = {
    CREATE TYPE_P <n:any_name> => syn::DefineTypeStmt {
        defnames: n,
        definition: Vec::new(),
    },

}

// We use the typical pattern introduced in lalrpop to encode precedence.

// replace with: a_expr: Box<syn::Expr<'input>> ??
// RustPython/python.lalrpop use Expression instead of Box<Expression>.
a_expr: syn::Expr<'input> = {
    <s:@L> <l:a_expr> <o:a_expr_lvl0_op> <r:a_expr_lvl1> <e:@R> => syn::Expr::AExpr(syn::AExpr{
        kind: syn::AExprKind::Op,
        name: vec![syn::StrVal::InPlace(o)],
        oprands: Box::new(syn::AExprOprands::Two(l, r)),
        loc: syn::Location{s, e},
    }),
    <s:a_expr_lvl1> => s,
}

a_expr_lvl0_op: &'input str = {
    <s:"+"> => s,
    <s:"-"> => s,
};

a_expr_lvl1: syn::Expr<'input> = {
    <s:@L> <l:a_expr_lvl1> <o:a_expr_lvl1_op> <r:a_expr_lvl2> <e:@R> => syn::Expr::AExpr(syn::AExpr{
        kind: syn::AExprKind::Op,
        name: vec![syn::StrVal::InPlace(o)],
        oprands: Box::new(syn::AExprOprands::Two(l, r)),
        loc: syn::Location{s, e},
    }),
    <s:a_expr_lvl2> => s,
}

a_expr_lvl1_op: &'input str = {
    <s:"*"> => s,
    <s:"/"> => s,
    <s:"%"> => s,
};

a_expr_lvl2: syn::Expr<'input> = {
    <s:@L> <o:a_expr_lvl2_unary_op> <r:a_expr_lvl2> <e:@R> => syn::Expr::AExpr(syn::AExpr{
        kind: syn::AExprKind::Op,
        name: vec![syn::StrVal::InPlace(o)],
        oprands: Box::new(syn::AExprOprands::One(r)),
        loc: syn::Location{s, e},
    }),
    <s:c_expr> => s,
}

a_expr_lvl2_unary_op: &'input str = {
    <s:"+"> => s,
    <s:"-"> => s,
};

// c_expr is the atomic expression used in the typical pattern for encoding precedence.
c_expr: syn::Expr<'input> = {
    <x:AexprConst> => x,
    "(" <x:a_expr> ")" => x,
}

AexprConst: syn::Expr<'input> = {
    <s:@L> <x:I_or_F_const> <e:@R> => syn::Expr::AConst(syn::AConst {
        val: syn::Value::Num(x),
        loc: syn::Location {s, e}
    }),
    <s:@L> <x:Sconst> <e:@R> => syn::Expr::AConst(syn::AConst {
        val: syn::Value::Str(x),
        loc: syn::Location {s, e}
    }),
}

target_el: syn::ResTarget<'input> = {
    <s:@L> <x:a_expr> AS <c:ColLabel> <e: @R> => syn::ResTarget {
        name: Some(c),
        val: x,
        loc: syn::Location{s, e},
    },
    <s:@L> <x:a_expr> <e: @R> => syn::ResTarget {
        name: None,
        val: x,
        loc: syn::Location{s, e},
    },
}

target_list: Vec<syn::ResTarget<'input>> = {
    <t:target_el> => vec![t],
    <mut l:target_list> "," <t:target_el> => {
        l.push(t);
        l
    },
}

opt_target_list: Vec<syn::ResTarget<'input>> = {
    <l:target_list> => l,
    // EMPTY
    => Vec::new(),
}

simple_select: syn::SelectStmt<'input> = {
    SELECT <l:opt_target_list> => syn::SelectStmt {
        tlist: l,
    },
}

select_no_parens: syn::SelectStmt<'input> = {
    <s:simple_select> => s,
}

SelectStmt: syn::SelectStmt<'input> = {
    <s:select_no_parens> => s,
}

qualified_name: syn::RangeVar<'input> = {
    <s: ColId> => syn::RangeVar {
        schemaname: None,
        relname: s,
        alias: None,
    },
}

Numeric: syn::TypeName<'input> = {
    INT_P => syn::system_type_name("int4"),

    SMALLINT => syn::system_type_name("int2"),
}

character: &'static str = {
    VARCHAR => "varchar",
}

CharacterWithLength: syn::TypeName<'input> = {
    <c: character> "(" <i: INTEGER> ")" => {
        let mut tn = syn::system_type_name(c);
        tn.typmods.push(i);
        tn
    },
}

CharacterWithoutLength: syn::TypeName<'input> = {
    <c: character> => syn::system_type_name(c),
}

Character: syn::TypeName<'input> = {
    <c: CharacterWithLength> => c,

    <c: CharacterWithoutLength> => c,
}

SimpleTypename: syn::TypeName<'input> = {
    <c: Character> => c,

    <n: Numeric> => n,
}

Typename: syn::TypeName<'input> = {
    <s: SimpleTypename> => s,
}

columnDef: syn::ColumnDef<'input> = {
    <c: ColId> <t: Typename> => syn::ColumnDef {
        colname: c,
        typename: t,
    },
}

TableElement: syn::ColumnDef<'input> = {
    <c: columnDef> => c,
}

TableElementList: Vec<syn::ColumnDef<'input>> = {
    <t: TableElement> => vec![t],

    <mut tl: TableElementList> "," <t: TableElement> => {
        tl.push(t);
        tl
    },
}

OptTableElementList: Vec<syn::ColumnDef<'input>> = {
    <tl: TableElementList> => tl,

    // EMPTY
    => Vec::new(),
}

def_arg: syn::Value<'input> = {
    <n: NumericOnly> => syn::Value::Num(n),

    <s: Sconst> => syn::Value::Str(s),
}

reloption_elem: syn::DefElem<'input> = {
    <c: ColLabel> "=" <d: def_arg> => syn::make_def_elem(c, d),
}

reloption_list: Vec<syn::DefElem<'input>> = {
    <r: reloption_elem> => vec![r],

    <mut rl: reloption_list> "," <r: reloption_elem> => {
        rl.push(r);
        rl
    },
}

reloptions: Vec<syn::DefElem<'input>> = {
    "(" <rl: reloption_list> ")" => rl,
}

OptWith: Vec<syn::DefElem<'input>> = {
    WITH <rl: reloptions> => rl,

    // EMPTY
    => Vec::new(),
}

// PG: CreateStmt
CreateTableStmt: syn::CreateTableStmt<'input> = {
    CREATE TABLE <n: qualified_name> "(" <tl: OptTableElementList> ")" <w: OptWith> => syn::CreateTableStmt {
        relation: n,
        table_elts: tl,
        opts: w,
    },
}

opt_table: &'input str = {
    <s: TABLE> => {
        s
    },
    => {
        ""
    }
}

LockStmt: syn::LockStmt<'input> = {
    LOCK_P opt_table <rs:relation_expr_list> <m: opt_lock> => syn::LockStmt {
        rels: rs,
        mode: m,
    }
}

relation_expr_list: Vec<syn::RangeVar<'input>> = {
    <s:relation_expr> => {
        vec![s]
    },
    <mut m: relation_expr_list> "," <s:relation_expr> => {
        m.push(s);
        m
    }
}

relation_expr: syn::RangeVar<'input> = {
    <q:qualified_name> => {
        q
    }
}

lock_type: LockMode = {
    ACCESS SHARE => LockMode::AccessShare,
    ROW SHARE => LockMode::RowShare,
    ROW EXCLUSIVE => LockMode::RowExclusive,
    SHARE UPDATE EXCLUSIVE => LockMode::ShareUpdateExclusive,
    SHARE => LockMode::Share,
    SHARE ROW EXCLUSIVE => LockMode::ShareRowExclusive,
    EXCLUSIVE => LockMode::Exclusive,
    ACCESS EXCLUSIVE => LockMode::AccessExclusive,
}

opt_lock: LockMode = {
    IN_P <s: lock_type> MODE => s,
    => LockMode::AccessExclusive,
}

copy_from: bool = {
    FROM => true,
    TO => false,
}

opt_using = {
    USING,
    => "",
}

opt_with = {
    WITH,
    =>"",
}

opt_as = {
    AS,
    =>"",
}

copy_delimiter: Option<syn::DefElem<'input>> = {
    opt_using DELIMITERS <v:Sconst> => {
        Some(syn::make_def_elem(syn::StrVal::InPlace("delimiter"), syn::Value::Str(v)))
    },
    => {
        None
    },
}

copy_opt_item: syn::DefElem<'input> = {
    NULL_P opt_as <v:Sconst> => {
        syn::make_def_elem(syn::StrVal::InPlace("null"), syn::Value::Str(v))
    },
    CSV => {
        syn::make_def_elem(syn::StrVal::InPlace("format"), syn::Value::Str(syn::StrVal::InPlace("csv")))
    },
}

copy_opt_list: Vec<syn::DefElem<'input>> = {
    <mut v:copy_opt_list> <i:copy_opt_item> => {
        v.push(i);
        v
    },
    => {
        vec![]
    },
}

copy_generic_opt_elem: syn::DefElem<'input> = {
    <n:ColLabel> <v:copy_generic_opt_arg> => {
        syn::make_def_elem(n, v)
    }
}

copy_generic_opt_list: Vec<syn::DefElem<'input>> = {
    <d:copy_generic_opt_elem> => vec![d],
    <mut v:copy_generic_opt_list> "," <i:copy_generic_opt_elem> => {
        v.push(i);
        v
    }
}

copy_options: Vec<syn::DefElem<'input>> = {
    <v:copy_opt_list> => v,
    "(" <v:copy_generic_opt_list> ")" => v,
}

copy_generic_opt_arg: syn::Value<'input> = {
    <v:opt_boolean_or_string> => syn::Value::Str(v),
    <n:NumericOnly> => syn::Value::Num(n),
}

CopyStmt: syn::CopyStmt<'input> = {
    COPY <q:qualified_name> <c:copy_from> <f:copy_file_name> <d:copy_delimiter> opt_with <mut o:copy_options> => {
        if let Some(delopt) = d {
            o.push(delopt);
        }
        syn::CopyStmt {
            rel: q,
            from: c,
            filename: f,
            opts: o,
        }
    }
}